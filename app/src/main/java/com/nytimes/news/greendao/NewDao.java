package com.nytimes.news.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.nytimes.news.greendao.New;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NEW".
*/
public class NewDao extends AbstractDao<New, Long> {

    public static final String TABLENAME = "NEW";

    /**
     * Properties of entity New.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Section = new Property(1, String.class, "section", false, "SECTION");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Abstract_info = new Property(3, String.class, "abstract_info", false, "ABSTRACT_INFO");
        public final static Property Url = new Property(4, String.class, "url", false, "URL");
        public final static Property Thumbnail_standard = new Property(5, String.class, "thumbnail_standard", false, "THUMBNAIL_STANDARD");
        public final static Property Item_type = new Property(6, String.class, "item_type", false, "ITEM_TYPE");
        public final static Property Source = new Property(7, String.class, "source", false, "SOURCE");
        public final static Property Published_date = new Property(8, String.class, "published_date", false, "PUBLISHED_DATE");
    };

    private DaoSession daoSession;


    public NewDao(DaoConfig config) {
        super(config);
    }
    
    public NewDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NEW\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SECTION\" TEXT," + // 1: section
                "\"TITLE\" TEXT," + // 2: title
                "\"ABSTRACT_INFO\" TEXT," + // 3: abstract_info
                "\"URL\" TEXT," + // 4: url
                "\"THUMBNAIL_STANDARD\" TEXT," + // 5: thumbnail_standard
                "\"ITEM_TYPE\" TEXT," + // 6: item_type
                "\"SOURCE\" TEXT," + // 7: source
                "\"PUBLISHED_DATE\" TEXT);"); // 8: published_date
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NEW\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, New entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String section = entity.getSection();
        if (section != null) {
            stmt.bindString(2, section);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String abstract_info = entity.getAbstract_info();
        if (abstract_info != null) {
            stmt.bindString(4, abstract_info);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(5, url);
        }
 
        String thumbnail_standard = entity.getThumbnail_standard();
        if (thumbnail_standard != null) {
            stmt.bindString(6, thumbnail_standard);
        }
 
        String item_type = entity.getItem_type();
        if (item_type != null) {
            stmt.bindString(7, item_type);
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(8, source);
        }
 
        String published_date = entity.getPublished_date();
        if (published_date != null) {
            stmt.bindString(9, published_date);
        }
    }

    @Override
    protected void attachEntity(New entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public New readEntity(Cursor cursor, int offset) {
        New entity = new New( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // section
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // abstract_info
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // url
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // thumbnail_standard
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // item_type
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // source
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // published_date
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, New entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSection(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAbstract_info(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setThumbnail_standard(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setItem_type(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSource(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPublished_date(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(New entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(New entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
